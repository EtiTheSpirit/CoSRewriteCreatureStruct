using CoSRewriteCreatureStruct.CreatureDataTypes;
using System;
using System.Diagnostics;
using System.Text;

namespace CoSRewriteCreatureStruct {

	

	public static class Program {

		public const string BASE_INFO =
@"--!strict
-- Designed for the CoS Rewrite. This script has been procedurally generated by C# code.
-- See https://github.com/EtiTheSpirit/CoSRewriteCreatureStruct for more information.
-- This should be a child of ReplicatedStorage.CoreData.TypeDefs.CreatureTypeDefs and be named ProcGen

local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local SonariaConstants = require(ReplicatedStorage.CoreData.SonariaConstants)
local EtiLibs = ReplicatedStorage.EtiLibs
local table = require(EtiLibs.Extension.Table)
local string = require(EtiLibs.Extension.String)

local BLACK_SEQUENCE = ColorSequence.new(Color3.new())
local DEFAULT_PALETTE = {
	Index = 1;
	Enabled = true;
	UnlockRequirement = """";
	NumberOfColorsToUse = 12;
	Colors = {
		Color01 = BLACK_SEQUENCE;
		Color02 = BLACK_SEQUENCE;
		Color03 = BLACK_SEQUENCE;
		Color04 = BLACK_SEQUENCE;
		Color05 = BLACK_SEQUENCE;
		Color06 = BLACK_SEQUENCE;
		Color07 = BLACK_SEQUENCE;
		Color08 = BLACK_SEQUENCE;
		Color09 = BLACK_SEQUENCE;
		Color10 = BLACK_SEQUENCE;
		Color11 = BLACK_SEQUENCE;
		Color12 = BLACK_SEQUENCE;
	};
}
local DEFAULT_SOUND = {
	ID = ""rbxassetid://0"";
	Volume = 0.5;
	Range = 600;
};
";

		public const string CLOSING_STRING =
@"export type Flags = typeof(CreatureObjectTemplate.Specifications.Attributes)
export type SoundInfo = typeof(DEFAULT_SOUND)
export type AnimationConfiguration = typeof(CreatureObjectTemplate.CreatureVisuals.Animations.Settings)
export type LandAnimations = typeof(CreatureObjectTemplate.CreatureVisuals.Animations.Land)
export type AerialAnimations = typeof(CreatureObjectTemplate.CreatureVisuals.Animations.Aerial)
export type AquaticAnimations = typeof(CreatureObjectTemplate.CreatureVisuals.Animations.Aquatic)
export type ActionAnimations = typeof(CreatureObjectTemplate.CreatureVisuals.Animations.Actions)
export type CreaturePalette = typeof(DEFAULT_PALETTE)
export type CreatureSpecs = typeof(CreatureObjectTemplate.Specifications)
";
		/*
export type CreatureOffensiveAilmentStats = typeof(CreatureObjectPluginData.Specifications.MainInfo.Stats.MeleeAilments.__CDV2_PLUGIN_TEMPLATE)
export type CreatureDefensiveAilmentStats = typeof(CreatureObjectPluginData.Specifications.MainInfo.Stats.DefensiveAilments.__CDV2_PLUGIN_TEMPLATE)
export type CreatureResistanceStats = typeof(CreatureObjectPluginData.Specifications.MainInfo.Stats.AilmentResistances.__CDV2_PLUGIN_TEMPLATE)
export type CreatureAreaAilmentStats = typeof(CreatureObjectPluginData.Specifications.MainInfo.Stats.AreaAilments.__CDV2_PLUGIN_TEMPLATE)
		*/


		public const string PROXY_STRING = @"-- Proxy Section
local ProcGen = require(script.ProcGen)
export type CreatureOffensiveAilmentStats = ProcGen.CreatureOffensiveAilmentStats
export type CreatureDefensiveAilmentStats = ProcGen.CreatureDefensiveAilmentStats
export type CreatureResistanceStats = ProcGen.CreatureResistanceStats
export type CreatureAreaAilmentStats = ProcGen.CreatureAreaAilmentStats
";

		public const string PROXY_LOADER =
@"local IsolatedSpecifications = table.deepishCopy(CreatureObjectTemplate.Specifications) do
	IsolatedSpecifications.Attributes = nil::any;
	IsolatedSpecifications.MainInfo.Size.Tier = nil::any;
	IsolatedSpecifications.MainInfo.Size.MinutesToGrow = nil::any;
end";


		// This serves as a means to create the template (as the plugin data and default values for use in the game)
		// as well as the Luau type definition
		// You should share this with your peers

		public static void Main() {

			Console.ForegroundColor = ConsoleColor.Green;
			Console.WriteLine("Generating creature struct...");

			Creature creature = new();

			Console.ForegroundColor = ConsoleColor.DarkGreen;
			Console.WriteLine("Converting to Luau template object...");
			string asLuaObject = creature.ToLuaObject();

			Console.WriteLine("Converting to plugin template object...");
			string asPluginObject = creature.ToPluginObject();

			Console.WriteLine("Generating Luau type definition...");
			string asType = creature.ToType();

			Console.WriteLine("Generating runtime structure for player characters...");
			string asInstanceType = creature.Specifications.ToInstanceType();

			Console.WriteLine("Finalizing code generation...");
			StringBuilder result = new StringBuilder();
			result.AppendLine(BASE_INFO);
			result.AppendLine(asLuaObject);
			result.AppendLine(asPluginObject);
			result.AppendLine(asType);
			result.AppendLine(PROXY_LOADER);
			result.AppendLine(CLOSING_STRING);
			result.AppendLine("export type CreatureAreaAilmentStats = {");
			result.Append(creature.Specifications.MainInfo.Stats.AreaAilments[0].ToType(noHeader: true));
			result.AppendLine("}");
			result.AppendLine("export type CreatureOffensiveAilmentStats = {");
			result.Append(creature.Specifications.MainInfo.Stats.MeleeAilments[0].ToType(noHeader: true));
			result.AppendLine("}");
			result.AppendLine("export type CreatureDefensiveAilmentStats = {");
			result.Append(creature.Specifications.MainInfo.Stats.DefensiveAilments[0].ToType(noHeader: true));
			result.AppendLine("}");
			result.AppendLine("export type CreatureResistanceStats = {");
			result.Append(creature.Specifications.MainInfo.Stats.AilmentResistances[0].ToType(noHeader: true));
			result.AppendLine("}");
			result.AppendLine();
			result.Append(@"return table.deepFreeze({
	CreatureObjectTemplate = CreatureObjectTemplate; 
	IsolatedSpecifications = IsolatedSpecifications;
	PluginTemplate = CreatureObjectPluginData; 
})");

			StringBuilder alt = new StringBuilder(PROXY_STRING);
			string[] lines = CLOSING_STRING.Split("\r\n");
			for (int i = 0; i < lines.Length - 1; i += 1) {
				string line = lines[i];
				string[] type = line.Split(" = ");
				string part = type[0];
				alt.Append(part);
				alt.Append(" = ProcGen.");
				alt.AppendLine(part.Replace("export type ", ""));
			}
			alt.AppendLine("export type CreatureData = ProcGen.CreatureData");

			StringBuilder typeDefsModule = new StringBuilder(File.ReadAllText("./CreatureTypeDefsBase.lua"));
			typeDefsModule.AppendLine(asInstanceType);
			typeDefsModule.AppendLine(alt.ToString());
			typeDefsModule.AppendLine(@"local retData = table.deepFreeze({
	CreatureObjectTemplate = ProcGen.CreatureObjectTemplate;
	IsolatedSpecifications = ProcGen.IsolatedSpecifications;
	PluginTemplate = ProcGen.PluginTemplate
})");
			typeDefsModule.AppendLine("return retData");

			Console.WriteLine("Writing files...");
			File.WriteAllText("./ProcGen.lua", result.ToString());
			File.WriteAllText("./CreatureTypeDefs.lua", typeDefsModule.ToString());

			File.WriteAllText("./DEBUG_testspecs.lua", asInstanceType);
			File.WriteAllText("./DEBUG_testobject.lua", asLuaObject);
			File.WriteAllText("./DEBUG_testplugin.lua", asPluginObject);
			File.WriteAllText("./DEBUG_testtypedef.lua", asType);

			Console.ForegroundColor = ConsoleColor.Green;
			Console.Write("Done! Would you like to open the files? [Y/N] >");
			FileInfo procgen = new FileInfo("./ProcGen.lua");
			FileInfo ctd = new FileInfo("./CreatureTypeDefs.lua");
			while (true) {
				ConsoleKeyInfo key = Console.ReadKey(true);
				if (key.Key == ConsoleKey.Y) {
					//Process.Start("notepad++", procgen.FullName);
					//Process.Start("notepad++", ctd.FullName);
					Util.OpenDefaultEditor(procgen);
					Util.OpenDefaultEditor(ctd);
					break;
				} else if (key.Key == ConsoleKey.N) {
					break;
				} else {
					Console.Beep(); // no
				}
			}
			/*
			Console.Write("Done! Press any key to quit...");
			Console.ReadKey(true);
			*/
			Environment.Exit(0);
		}
	}
}